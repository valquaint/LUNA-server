import pg from 'pg';
import winston from 'winston';
import factions from '../models/factions';
import { products } from '../models/shop';
import { expeditions } from '../models/expeditions';

export const pool = new pg.Pool({
    user: process.env.DB_USER,
    host: process.env.DB_HOST,
    database: process.env.DB_DATABASE,
    password: process.env.DB_PASSWORD,
    port: parseInt(process.env.DB_PORT as string)
})
export async function init() {
    try {
        const res = await pool.query('SELECT $1::text as message', ['Connected to PostgreSQL'])
        winston.info(res.rows[0].message)
        const checkDB = await pool.query("SELECT db_version FROM system;").catch((err) => {
            winston.error("There was an error receiving the version...")
            winston.error(err);
            return { rows: ["0"] };
        });
        if (parseInt(checkDB.rows[0].db_version) === parseInt(process.env.DB_VERSION as string)) {
            winston.info("Luna database exists and is correct/expected version.");
        } else {
            winston.info(`Luna Database is out of date or unexpected version. Database version is ${parseInt(checkDB.rows[0].db_version)} (directly received ${checkDB.rows[0].db_version}). Expected version ${parseInt(process.env.DB_VERSION as string)}`);
            const dropTables = await pool.query(`SELECT * FROM pg_catalog.pg_tables WHERE schemaname != 'pg_catalog' AND schemaname != 'information_schema';`);
            if (dropTables.rows.length > 0) {
                const dropQuery = `DROP TABLE${dropTables.rows.map((table) => ` ${table.tablename}`)}`;
                await pool.query(`${dropQuery.substring(0, dropQuery.length)};`).catch(winston.error);
            }
            winston.info("Tables dropped. Creating new tables...");
            const tables = {
                system: await pool.query(`CREATE TABLE system (
                    "db_version" int,
                    "app_version" varchar(16)
                    );`).then(async () => {
                    return await pool.query(`INSERT INTO system VALUES 
                    (${process.env.DB_VERSION}, '${process.env.APP_VERSION}');`)
                        .catch((err) => {
                            winston.error(err);
                            return "FAIL"
                        }).then(() => {
                            winston.info("System Table Created");
                            return "PASS";
                        }, () => {
                            winston.info("System Table Failed to Create");
                            return "FAIL";
                        })
                }),
                users: await pool.query(`
                CREATE TABLE users (
                    "id" int GENERATED BY DEFAULT AS IDENTITY 
                    (START WITH 1001 INCREMENT BY 1),
                    "username" varchar(16) unique not null,
                    "email" varchar(90) unique not null,
                    "colony_name" varchar(30) unique not null,
                    "password" varchar(72) not null,
                    "faction_id" int,
                    "faction_resource" int default 10,
                    "ucr" int default 10,
                    "currency" int default 10
                    );`).then(() => {
                    winston.info("Users Table Created");
                    return "PASS";
                }, (err) => {
                    winston.info("Users Table Failed to Create");
                    console.log(err);
                    return "FAIL";
                }),
                factions: await pool.query(`
                CREATE TABLE factions (
                    "faction_id" serial,
                    "faction_name" varchar(45) unique not null,
                    "faction_description" text,
                    "faction_short" text,
                    "resource_name" varchar(30),
                    "resource_description" text,
                    "ucr_name" varchar(30),
                    "ucr_description" text,
                    "resources" int default 0,
                    "currency" int default 0,
                    "victor" bool default false,
                    PRIMARY KEY ("faction_id")
                    );`).then(async () => {
                    return await pool.query(`INSERT INTO factions(faction_name, faction_description, faction_short, resource_name, resource_description, ucr_name, ucr_description) VALUES
                        ('Aerun', $1, '${factions.Aerun.short}','${factions.Aerun.resource}',$2, '${factions.Aerun.ucr}', $3),
                        ('Enlightened', $4, '${factions.Enlightened.short}','${factions.Enlightened.resource}',$5, '${factions.Enlightened.ucr}', $6),
                        ('Regents', $7, '${factions.Regents.short}','${factions.Regents.resource}',$8, '${factions.Regents.ucr}', $9);`,
                        [factions.Aerun.description, factions.Aerun.resource_description, factions.Aerun.ucr_description,
                        factions.Enlightened.description, factions.Enlightened.resource_description, factions.Enlightened.ucr_description,
                        factions.Regents.description, factions.Regents.resource_description, factions.Regents.ucr_description])
                        .catch((err) => {
                            winston.error(err);
                            return "FAIL"
                        }).then(() => {
                            winston.info("Factions Table Created");
                            return "PASS";
                        }, () => {
                            winston.info("Factions Table Failed to Create");
                            return "FAIL";
                        })
                }),
                structures: await pool.query(`
                CREATE TABLE structures (
                    "id" serial,
                    "owner" int not null,
                    "structure_id" int not null,
                    "level" int not null,
                    PRIMARY KEY ("id")
                    );`).then(() => {
                    winston.info("Structures Table Created");
                    return "PASS";
                }, () => {
                    winston.info("Structures Table Failed to Create");
                    return "FAIL";
                }),
                shop: await pool.query(`
                CREATE TABLE shop (
                    "id" serial,
                    "faction_id" int not null,
                    "type" int not null,
                    "ucr" int not null,
                    "water" int not null,
                    "power" int not null,
                    "gain" int not null,
                    "name" varchar(90) not null,
                    "description" text not null,
                    PRIMARY KEY ("id")
                    );`).then(async () => {
                    winston.info("Shop Table Created");
                    const insert = products.reduce((query, product) => `${query}(${product.faction}, ${product.type}, ${product.ucr}, ${product.water}, ${product.power}, ${product.gain}, '${product.name}', '${product.description}'),`, "");
                    return await pool.query(`INSERT INTO shop (faction_id, type, ucr, water, power, gain, name, description) VALUES ${insert.substring(0, insert.length - 1)};`)
                        .then(() => {
                            return "PASS";
                        }, (err) => {
                            winston.error(err);
                            return "FAIL";
                        })
                }, () => {
                    winston.info("Shop Table Failed to Create");
                    return "FAIL";
                }),
                tokens: await pool.query(`
                CREATE TABLE tokens (
                    "token" text unique,
                    "age" timestamp
                );`).then(() => {
                    winston.info("Tokens Table Created");
                    return "PASS";
                }, () => {
                    winston.info("Tokens Table Failed to Create");
                    return "FAIL";
                }),
                expeditions: await pool.query(`
                CREATE TABLE expeditions (
                    "id" serial,
                    "event" text unique,
                    "responses" text,
                    "requirements" varchar(30),
                    PRIMARY KEY ("id")
                );`).then(async () => {
                    winston.info("Expeditions Table Created");
                    const insert = expeditions.reduce((query, expedition) => `${query}('${expedition.description.replaceAll("'", "''")}', '${JSON.stringify(expedition.options).replaceAll("'", "''")}','${JSON.stringify(expedition.requirements).replaceAll("'", "''")}'),`, "");
                    return await pool.query(`INSERT INTO expeditions (event, responses, requirements) VALUES ${insert.substring(0, insert.length - 1)}`).then(() => {
                        return "PASS";
                    }, (err) => {
                        winston.error(err);
                        return "FAIL";
                    })

                }, () => {
                    winston.info("Expeditions Table Failed to Create");
                    return "FAIL";
                })
            }
            winston.info("Created Luna tables for first time:")
            console.table(tables);
        }
    } catch (err) {
        console.error(err);
    }

}
